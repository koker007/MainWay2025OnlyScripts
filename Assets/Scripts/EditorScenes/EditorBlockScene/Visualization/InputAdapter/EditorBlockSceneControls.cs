//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/Scripts/EditorScenes/EditorBlockScene/Visualization/InputAdapter/EditorBlockSceneControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Scene.Editor.Block
{
    /// <summary>
    /// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts/EditorScenes/EditorBlockScene/Visualization/InputAdapter/EditorBlockSceneControls.inputactions".
    /// </summary>
    /// <remarks>
    /// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
    /// </remarks>
    /// <example>
    /// <code>
    /// using namespace UnityEngine;
    /// using UnityEngine.InputSystem;
    ///
    /// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
    /// public class Example : MonoBehaviour, MyActions.IPlayerActions
    /// {
    ///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
    ///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
    ///
    ///     void Awake()
    ///     {
    ///         m_Actions = new MyActions_Actions();              // Create asset object.
    ///         m_Player = m_Actions.Player;                      // Extract action map object.
    ///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
    ///     }
    ///
    ///     void OnDestroy()
    ///     {
    ///         m_Actions.Dispose();                              // Destroy asset object.
    ///     }
    ///
    ///     void OnEnable()
    ///     {
    ///         m_Player.Enable();                                // Enable all actions within map.
    ///     }
    ///
    ///     void OnDisable()
    ///     {
    ///         m_Player.Disable();                               // Disable all actions within map.
    ///     }
    ///
    ///     #region Interface implementation of MyActions.IPlayerActions
    ///
    ///     // Invoked when "Move" action is either started, performed or canceled.
    ///     public void OnMove(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
    ///     }
    ///
    ///     // Invoked when "Attack" action is either started, performed or canceled.
    ///     public void OnAttack(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
    ///     }
    ///
    ///     #endregion
    /// }
    /// </code>
    /// </example>
    public partial class @EditorBlockSceneControls: IInputActionCollection2, IDisposable
    {
        /// <summary>
        /// Provides access to the underlying asset instance.
        /// </summary>
        public InputActionAsset asset { get; }

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public @EditorBlockSceneControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""EditorBlockSceneControls"",
    ""maps"": [
        {
            ""name"": ""InputAdapterPC"",
            ""id"": ""fbb860a4-9f87-45a8-81c7-bd04c4ba80a3"",
            ""actions"": [
                {
                    ""name"": ""IsChangeLook"",
                    ""type"": ""Button"",
                    ""id"": ""6783eb80-e409-419d-8d2c-317e186cb752"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""7b7d43e4-cd1f-4d56-92e7-e5aeaf0a2b21"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""baa2af41-e40a-4962-b3eb-18a0e1f0fad6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""550da683-9136-47b3-97af-ef5b66d3c14d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3cb9dff-efa5-4fed-9aa4-e0118856cded"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""223a715b-8f13-432c-bdeb-ec0a14d1a8e4"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4fd9a14-eec1-4aef-a2bb-e79ff0721c28"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsChangeLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31820f7a-7bd1-4d0a-aea3-a105c3ce0780"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsChangeLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InputAdapterVR"",
            ""id"": ""dcf7de13-ad99-4457-b67c-392c536e4f44"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""076a79c8-8aeb-438a-8d33-bc64a1a25607"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""08be7aa4-7e9f-44f9-9dac-f7c07d9fcee6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8288cdbd-86a9-45b9-8590-ff7b7a0b8790"",
                    ""path"": ""<XRController>{RightHand}/joystick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf64ecdd-58a4-4b98-b228-a682fbff609d"",
                    ""path"": ""<XRController>{LeftHand}/joystick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InputAdapterVRMenu"",
            ""id"": ""7d327157-c803-4933-9b57-7e5cfcae9814"",
            ""actions"": [
                {
                    ""name"": ""LeftHandClick"",
                    ""type"": ""Button"",
                    ""id"": ""398a234a-a0f9-4d41-b026-7a152b64b889"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightHandClick"",
                    ""type"": ""Button"",
                    ""id"": ""c9042930-c64c-404f-8ddb-1f9e031ea0b3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c4695866-462d-4f73-a914-55fde4bf69a0"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8938c2e-855a-4d1c-b51f-ff4fe327a279"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c596729e-46ab-4f77-8843-f26efec0d3b9"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // InputAdapterPC
            m_InputAdapterPC = asset.FindActionMap("InputAdapterPC", throwIfNotFound: true);
            m_InputAdapterPC_IsChangeLook = m_InputAdapterPC.FindAction("IsChangeLook", throwIfNotFound: true);
            m_InputAdapterPC_Look = m_InputAdapterPC.FindAction("Look", throwIfNotFound: true);
            m_InputAdapterPC_Zoom = m_InputAdapterPC.FindAction("Zoom", throwIfNotFound: true);
            // InputAdapterVR
            m_InputAdapterVR = asset.FindActionMap("InputAdapterVR", throwIfNotFound: true);
            m_InputAdapterVR_Look = m_InputAdapterVR.FindAction("Look", throwIfNotFound: true);
            m_InputAdapterVR_Zoom = m_InputAdapterVR.FindAction("Zoom", throwIfNotFound: true);
            // InputAdapterVRMenu
            m_InputAdapterVRMenu = asset.FindActionMap("InputAdapterVRMenu", throwIfNotFound: true);
            m_InputAdapterVRMenu_LeftHandClick = m_InputAdapterVRMenu.FindAction("LeftHandClick", throwIfNotFound: true);
            m_InputAdapterVRMenu_RightHandClick = m_InputAdapterVRMenu.FindAction("RightHandClick", throwIfNotFound: true);
        }

        ~@EditorBlockSceneControls()
        {
            UnityEngine.Debug.Assert(!m_InputAdapterPC.enabled, "This will cause a leak and performance issues, EditorBlockSceneControls.InputAdapterPC.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_InputAdapterVR.enabled, "This will cause a leak and performance issues, EditorBlockSceneControls.InputAdapterVR.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_InputAdapterVRMenu.enabled, "This will cause a leak and performance issues, EditorBlockSceneControls.InputAdapterVRMenu.Disable() has not been called.");
        }

        /// <summary>
        /// Destroys this asset and all associated <see cref="InputAction"/> instances.
        /// </summary>
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
        public void Enable()
        {
            asset.Enable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
        public void Disable()
        {
            asset.Disable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
        public IEnumerable<InputBinding> bindings => asset.bindings;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // InputAdapterPC
        private readonly InputActionMap m_InputAdapterPC;
        private List<IInputAdapterPCActions> m_InputAdapterPCActionsCallbackInterfaces = new List<IInputAdapterPCActions>();
        private readonly InputAction m_InputAdapterPC_IsChangeLook;
        private readonly InputAction m_InputAdapterPC_Look;
        private readonly InputAction m_InputAdapterPC_Zoom;
        /// <summary>
        /// Provides access to input actions defined in input action map "InputAdapterPC".
        /// </summary>
        public struct InputAdapterPCActions
        {
            private @EditorBlockSceneControls m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public InputAdapterPCActions(@EditorBlockSceneControls wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "InputAdapterPC/IsChangeLook".
            /// </summary>
            public InputAction @IsChangeLook => m_Wrapper.m_InputAdapterPC_IsChangeLook;
            /// <summary>
            /// Provides access to the underlying input action "InputAdapterPC/Look".
            /// </summary>
            public InputAction @Look => m_Wrapper.m_InputAdapterPC_Look;
            /// <summary>
            /// Provides access to the underlying input action "InputAdapterPC/Zoom".
            /// </summary>
            public InputAction @Zoom => m_Wrapper.m_InputAdapterPC_Zoom;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_InputAdapterPC; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="InputAdapterPCActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(InputAdapterPCActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="InputAdapterPCActions" />
            public void AddCallbacks(IInputAdapterPCActions instance)
            {
                if (instance == null || m_Wrapper.m_InputAdapterPCActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InputAdapterPCActionsCallbackInterfaces.Add(instance);
                @IsChangeLook.started += instance.OnIsChangeLook;
                @IsChangeLook.performed += instance.OnIsChangeLook;
                @IsChangeLook.canceled += instance.OnIsChangeLook;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="InputAdapterPCActions" />
            private void UnregisterCallbacks(IInputAdapterPCActions instance)
            {
                @IsChangeLook.started -= instance.OnIsChangeLook;
                @IsChangeLook.performed -= instance.OnIsChangeLook;
                @IsChangeLook.canceled -= instance.OnIsChangeLook;
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
                @Zoom.started -= instance.OnZoom;
                @Zoom.performed -= instance.OnZoom;
                @Zoom.canceled -= instance.OnZoom;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="InputAdapterPCActions.UnregisterCallbacks(IInputAdapterPCActions)" />.
            /// </summary>
            /// <seealso cref="InputAdapterPCActions.UnregisterCallbacks(IInputAdapterPCActions)" />
            public void RemoveCallbacks(IInputAdapterPCActions instance)
            {
                if (m_Wrapper.m_InputAdapterPCActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="InputAdapterPCActions.AddCallbacks(IInputAdapterPCActions)" />
            /// <seealso cref="InputAdapterPCActions.RemoveCallbacks(IInputAdapterPCActions)" />
            /// <seealso cref="InputAdapterPCActions.UnregisterCallbacks(IInputAdapterPCActions)" />
            public void SetCallbacks(IInputAdapterPCActions instance)
            {
                foreach (var item in m_Wrapper.m_InputAdapterPCActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InputAdapterPCActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="InputAdapterPCActions" /> instance referencing this action map.
        /// </summary>
        public InputAdapterPCActions @InputAdapterPC => new InputAdapterPCActions(this);

        // InputAdapterVR
        private readonly InputActionMap m_InputAdapterVR;
        private List<IInputAdapterVRActions> m_InputAdapterVRActionsCallbackInterfaces = new List<IInputAdapterVRActions>();
        private readonly InputAction m_InputAdapterVR_Look;
        private readonly InputAction m_InputAdapterVR_Zoom;
        /// <summary>
        /// Provides access to input actions defined in input action map "InputAdapterVR".
        /// </summary>
        public struct InputAdapterVRActions
        {
            private @EditorBlockSceneControls m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public InputAdapterVRActions(@EditorBlockSceneControls wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "InputAdapterVR/Look".
            /// </summary>
            public InputAction @Look => m_Wrapper.m_InputAdapterVR_Look;
            /// <summary>
            /// Provides access to the underlying input action "InputAdapterVR/Zoom".
            /// </summary>
            public InputAction @Zoom => m_Wrapper.m_InputAdapterVR_Zoom;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_InputAdapterVR; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="InputAdapterVRActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(InputAdapterVRActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="InputAdapterVRActions" />
            public void AddCallbacks(IInputAdapterVRActions instance)
            {
                if (instance == null || m_Wrapper.m_InputAdapterVRActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InputAdapterVRActionsCallbackInterfaces.Add(instance);
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="InputAdapterVRActions" />
            private void UnregisterCallbacks(IInputAdapterVRActions instance)
            {
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
                @Zoom.started -= instance.OnZoom;
                @Zoom.performed -= instance.OnZoom;
                @Zoom.canceled -= instance.OnZoom;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="InputAdapterVRActions.UnregisterCallbacks(IInputAdapterVRActions)" />.
            /// </summary>
            /// <seealso cref="InputAdapterVRActions.UnregisterCallbacks(IInputAdapterVRActions)" />
            public void RemoveCallbacks(IInputAdapterVRActions instance)
            {
                if (m_Wrapper.m_InputAdapterVRActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="InputAdapterVRActions.AddCallbacks(IInputAdapterVRActions)" />
            /// <seealso cref="InputAdapterVRActions.RemoveCallbacks(IInputAdapterVRActions)" />
            /// <seealso cref="InputAdapterVRActions.UnregisterCallbacks(IInputAdapterVRActions)" />
            public void SetCallbacks(IInputAdapterVRActions instance)
            {
                foreach (var item in m_Wrapper.m_InputAdapterVRActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InputAdapterVRActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="InputAdapterVRActions" /> instance referencing this action map.
        /// </summary>
        public InputAdapterVRActions @InputAdapterVR => new InputAdapterVRActions(this);

        // InputAdapterVRMenu
        private readonly InputActionMap m_InputAdapterVRMenu;
        private List<IInputAdapterVRMenuActions> m_InputAdapterVRMenuActionsCallbackInterfaces = new List<IInputAdapterVRMenuActions>();
        private readonly InputAction m_InputAdapterVRMenu_LeftHandClick;
        private readonly InputAction m_InputAdapterVRMenu_RightHandClick;
        /// <summary>
        /// Provides access to input actions defined in input action map "InputAdapterVRMenu".
        /// </summary>
        public struct InputAdapterVRMenuActions
        {
            private @EditorBlockSceneControls m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public InputAdapterVRMenuActions(@EditorBlockSceneControls wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "InputAdapterVRMenu/LeftHandClick".
            /// </summary>
            public InputAction @LeftHandClick => m_Wrapper.m_InputAdapterVRMenu_LeftHandClick;
            /// <summary>
            /// Provides access to the underlying input action "InputAdapterVRMenu/RightHandClick".
            /// </summary>
            public InputAction @RightHandClick => m_Wrapper.m_InputAdapterVRMenu_RightHandClick;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_InputAdapterVRMenu; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="InputAdapterVRMenuActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(InputAdapterVRMenuActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="InputAdapterVRMenuActions" />
            public void AddCallbacks(IInputAdapterVRMenuActions instance)
            {
                if (instance == null || m_Wrapper.m_InputAdapterVRMenuActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InputAdapterVRMenuActionsCallbackInterfaces.Add(instance);
                @LeftHandClick.started += instance.OnLeftHandClick;
                @LeftHandClick.performed += instance.OnLeftHandClick;
                @LeftHandClick.canceled += instance.OnLeftHandClick;
                @RightHandClick.started += instance.OnRightHandClick;
                @RightHandClick.performed += instance.OnRightHandClick;
                @RightHandClick.canceled += instance.OnRightHandClick;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="InputAdapterVRMenuActions" />
            private void UnregisterCallbacks(IInputAdapterVRMenuActions instance)
            {
                @LeftHandClick.started -= instance.OnLeftHandClick;
                @LeftHandClick.performed -= instance.OnLeftHandClick;
                @LeftHandClick.canceled -= instance.OnLeftHandClick;
                @RightHandClick.started -= instance.OnRightHandClick;
                @RightHandClick.performed -= instance.OnRightHandClick;
                @RightHandClick.canceled -= instance.OnRightHandClick;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="InputAdapterVRMenuActions.UnregisterCallbacks(IInputAdapterVRMenuActions)" />.
            /// </summary>
            /// <seealso cref="InputAdapterVRMenuActions.UnregisterCallbacks(IInputAdapterVRMenuActions)" />
            public void RemoveCallbacks(IInputAdapterVRMenuActions instance)
            {
                if (m_Wrapper.m_InputAdapterVRMenuActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="InputAdapterVRMenuActions.AddCallbacks(IInputAdapterVRMenuActions)" />
            /// <seealso cref="InputAdapterVRMenuActions.RemoveCallbacks(IInputAdapterVRMenuActions)" />
            /// <seealso cref="InputAdapterVRMenuActions.UnregisterCallbacks(IInputAdapterVRMenuActions)" />
            public void SetCallbacks(IInputAdapterVRMenuActions instance)
            {
                foreach (var item in m_Wrapper.m_InputAdapterVRMenuActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InputAdapterVRMenuActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="InputAdapterVRMenuActions" /> instance referencing this action map.
        /// </summary>
        public InputAdapterVRMenuActions @InputAdapterVRMenu => new InputAdapterVRMenuActions(this);
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "InputAdapterPC" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="InputAdapterPCActions.AddCallbacks(IInputAdapterPCActions)" />
        /// <seealso cref="InputAdapterPCActions.RemoveCallbacks(IInputAdapterPCActions)" />
        public interface IInputAdapterPCActions
        {
            /// <summary>
            /// Method invoked when associated input action "IsChangeLook" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnIsChangeLook(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Look" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnLook(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Zoom" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnZoom(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "InputAdapterVR" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="InputAdapterVRActions.AddCallbacks(IInputAdapterVRActions)" />
        /// <seealso cref="InputAdapterVRActions.RemoveCallbacks(IInputAdapterVRActions)" />
        public interface IInputAdapterVRActions
        {
            /// <summary>
            /// Method invoked when associated input action "Look" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnLook(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Zoom" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnZoom(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "InputAdapterVRMenu" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="InputAdapterVRMenuActions.AddCallbacks(IInputAdapterVRMenuActions)" />
        /// <seealso cref="InputAdapterVRMenuActions.RemoveCallbacks(IInputAdapterVRMenuActions)" />
        public interface IInputAdapterVRMenuActions
        {
            /// <summary>
            /// Method invoked when associated input action "LeftHandClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnLeftHandClick(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "RightHandClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnRightHandClick(InputAction.CallbackContext context);
        }
    }
}
